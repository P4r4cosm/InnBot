using System.Text;
using InnBot.DataProviders;
using InnBot.Models;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace InnBot.Commands;

/// <summary>
/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ò–ù–ù.
/// </summary>
/// <param name="OriginalInput">–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</param>
/// <param name="IsValid">–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –ò–ù–ù –ø–æ —Ñ–æ—Ä–º–∞—Ç—É.</param>
/// <param name="ErrorMessage">–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ IsValid = false.</param>
public record InnValidationResult(string OriginalInput, bool IsValid, string? ErrorMessage);

public class InnCommand : ICommand
{
    public string Name => "/inn";

    private readonly IDataProvider _dataProvider;
    private readonly ILogger<InnCommand> _logger;

    public InnCommand(IDataProvider dataProvider, ILogger<InnCommand> logger)
    {
        _dataProvider = dataProvider;
        _logger = logger;
    }

    public async Task ExecuteAsync(Update update, ITelegramBotClient botClient)
    {
        var chatId = update.Message!.Chat.Id;
        var messageText = update.Message.Text;
        
        
        // –û—Ç–¥–µ–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        var argsString = messageText.Length > Name.Length ? messageText.Substring(Name.Length) : string.Empty;
        
        // –Ω–∞–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        char[] delimiters = { ' ', ',', ';', '\n', '\r' };

        // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        var innCandidates = argsString.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).ToList();

        if (!innCandidates.Any())
        {
            await botClient.SendMessage(chatId,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ò–ù–ù –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n" +
                "–ò—Ö –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏–ª–∏ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π.\n" +
                "–ü—Ä–∏–º–µ—Ä: `/inn 7707083893, 7706799482`",
                parseMode: ParseMode.Markdown);
            return;
        }

        _logger.LogInformation("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É {Count} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –ò–ù–ù –¥–ª—è —á–∞—Ç–∞ {ChatId}.", innCandidates.Count, chatId);

        // 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç
        var validationResults = innCandidates.Select(ValidateInn).ToList();

        // 3. –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ò–ù–ù –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        var validInns = validationResults
            .Where(r => r.IsValid)
            .Select(r => r.OriginalInput)
            .Distinct()
            .ToList();

        // 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å)
        List<CompanyInfo> foundCompanies = new();
        if (validInns.Any())
        {
            try
            {
                var companies = await _dataProvider.GetCompanyInfoByInnAsync(validInns);
                foundCompanies.AddRange(companies);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {ChatId}", chatId);
                await botClient.SendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                return;
            }
        }
        
        // 5. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        var responseText = BuildResponse(validationResults, foundCompanies);
        

        await botClient.SendMessage(chatId, responseText, parseMode: ParseMode.Markdown);
    }

    private static InnValidationResult ValidateInn(string innCandidate)
    {
        if (string.IsNullOrWhiteSpace(innCandidate))
        {
            return new InnValidationResult(innCandidate, false, "–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.");
        }
        if (!innCandidate.All(char.IsDigit))
        {
            return new InnValidationResult(innCandidate, false, "–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–µ —Ü–∏—Ñ—Ä—ã).");
        }
        if (innCandidate.Length != 10 && innCandidate.Length != 12)
        {
            return new InnValidationResult(innCandidate, false, $"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ ({innCandidate.Length} —Ü–∏—Ñ—Ä), –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –∏–ª–∏ 12.");
        }

        return new InnValidationResult(innCandidate, true, null);
    }
    
    private string BuildResponse(List<InnValidationResult> validationResults, List<CompanyInfo> foundCompanies)
    {
        var responseBuilder = new StringBuilder();
        
        var sortedCompanies = foundCompanies.OrderBy(c => c.Name).ToList();
        var foundInns = sortedCompanies.Select(c => c.Inn).ToHashSet();
        
        if (sortedCompanies.Any())
        {
            responseBuilder.AppendLine("‚úÖ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:**");
            responseBuilder.AppendLine();
            foreach (var company in sortedCompanies)
            {
                responseBuilder.AppendLine($"**{company.Name}**");
                responseBuilder.AppendLine($"   –ò–ù–ù: `{company.Inn}`");
                responseBuilder.AppendLine($"   –ê–¥—Ä–µ—Å: {company.Address ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}");
                responseBuilder.AppendLine();
            }
        }

        var notFoundInns = validationResults
            .Where(r => r.IsValid && !foundInns.Contains(r.OriginalInput))
            .ToList();
        
        if (notFoundInns.Any())
        {
            responseBuilder.AppendLine("üü° **–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ:**");
            foreach (var result in notFoundInns)
            {
                responseBuilder.AppendLine($"`{result.OriginalInput}`");
            }
            responseBuilder.AppendLine();
        }

        var invalidResults = validationResults.Where(r => !r.IsValid).ToList();
        if (invalidResults.Any())
        {
            responseBuilder.AppendLine("‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:**");
            foreach (var result in invalidResults)
            {
                responseBuilder.AppendLine($"`{result.OriginalInput}` - {result.ErrorMessage}");
            }
            responseBuilder.AppendLine();
        }

        if (responseBuilder.Length == 0)
        {
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.";
        }
        
        return responseBuilder.ToString();
    }
}